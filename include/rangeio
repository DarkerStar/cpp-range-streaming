/* 
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

/* 
 * This C++ header file implements a proposed extension to the C++ standard
 * library that allows for easy and intuitive input and output of ranges,
 * without requiring the use of the algorithms library.
 * 
 * For more details, check https://github.com/DarkerStar/cpp-range-streaming
 * 
 * Version 2.0.0:
 *   * Complete rewrite.
 *   * Renamed header to <rangeio>.
 *   * Eliminated named return types.
 * 
 * Version 1.5.0:
 *   * Added write_all().
 * 
 * Version 1.4.0:
 *   * Added overwrite() and insert(), and back_insert_n() and front_insert_n().
 * 
 * Version 1.3.0:
 *   * Added back_insert() and front_insert().
 * 
 * Version 1.2.0:
 *   * Added support for preserving formatting from element to element in
 *     input.
 * 
 * Version 1.1.0:
 *   * Added support for preserving formatting from element to element in
 *     output.
 */
#ifndef STD_RANGEIO_
#define STD_RANGEIO_

#include <iosfwd>
#include <iterator> // Needed for iterator_traits and begin()
#include <limits>   // Needed for numeric_limits<size_t>::max()
#include <utility>

namespace std {

/* 
 * All of the monkeyworks for range IO is in this namespace.
 */
namespace rangeio_detail {

/* 
 * This is a helper type to get the value type of a range.
 */
template <typename Range>
using value_type_of = typename iterator_traits<decltype(begin(declval<Range&>()))>::value_type;

/* 
 * This is a helper class that stores the formatting state of a stream, and
 * restores that state on demand. It is used to keep the formatting consistent
 * for each item in the range being read or written.
 */
template <typename CharT, typename Traits>
struct stream_formatting_saver
{
  explicit stream_formatting_saver(basic_ios<CharT, Traits>& s) :
    stream_{s},
    flags_{s.flags()},
    width_{s.width()},
    precision_{s.precision()},
    fill_{s.fill()}
  {}
  
  void restore() const
  {
    stream_.flags(flags_);
    stream_.fill(fill_);
    stream_.precision(precision_);
    stream_.width(width_);
  }
  
  basic_ios<CharT, Traits>& stream_;
  typename basic_ios<CharT, Traits>::fmtflags const flags_;
  streamsize const width_;
  streamsize const precision_;
  CharT const fill_;
};

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 * Traits classes for input behaviours.
 * 
 * To cut down on code duplication, the bulk of range input is done in a single
 * class, with the differences in behaviours for the different operations
 * handled by traits classes.
 * 
 * There are only two functions required to differentiate between input
 * operations:
 *   - prepare: This is called at the start of an input operation. The primary
 *              purpose is to initialize the next() iterator to what it should
 *              be if no input is done. For example, for front_insert(r), the
 *              next() iterator should initially be begin(r), so if nothing is
 *              is read during the input operation, next() returns begin(r).
 *              For back_insert(r), the next() iterator should initially be
 *              end(r). For insert(r, i), the next() iterator should initially
 *              be i.
 *   - input:   This does the actual input, checking any relevant conditions
 *              and returning true if the input operation can continue. It also
 *              updates the next() iterator.
 * 
 * There are four traits classes, for the four families of input operations:
 * 
 * overwrite_behaviour
 *   - overwrite(Range&)
 * back_insert_behaviour
 *   - back_insert(Range&)
 *   - back_insert(Range&, value_type_of)
 *   - back_insert_n(Range&, size_t)
 *   - back_insert_n(Range&, size_t, value_type_of)
 * front_insert_behaviour
 *   - front_insert(Range&)
 *   - front_insert(Range&, value_type_of)
 *   - front_insert_n(Range&, size_t)
 *   - front_insert_n(Range&, size_t, value_type_of)
 * insert_behaviour
 *   - insert(Range&, Iterator)
 *   - insert(Range&, Iterator, value_type_of)
 *   - insert_n(Range&, Iterator, size_t)
 *   - insert_n(Range&, Iterator, size_t, value_type_of)
 * 
 *~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/

/* 
 * Base for input behaviour traits classes.
 */
template <typename Range, typename Iterator>
struct basic_input_behaviour
{
  typedef Range                range_type;
  typedef Iterator             iterator_type;
  typedef value_type_of<Range> value_type;
  
  auto prepare(Range& r, Iterator& i) -> bool
  {
    i = begin(r);
    return true;
  }
};

/* 
 * Base for input behaviour traits classes that do inserting. This maintains an
 * object of the range's value type to be used as the input target.
 */
template <typename Range, typename Iterator>
struct basic_insert_behaviour :
  basic_input_behaviour<Range, Iterator>
{
  typedef typename basic_insert_behaviour::value_type value_type;
  
  basic_insert_behaviour(size_t n, value_type v) : n_{n}, v_{move(v)} {}
  
  size_t const n_;
  value_type v_;
};

/* 
 * Traits class for overwrite behaviour.
 */
template <typename Range>
struct overwrite_behaviour :
  basic_input_behaviour<Range, decltype(begin(declval<Range&>()))>
{
  typedef typename overwrite_behaviour::range_type    range_type;
  typedef typename overwrite_behaviour::iterator_type iterator_type;
  
  // As long as the current iterator i isn't end(r), input and overwrite *i,
  // then increment i.
  template <typename CharT, typename Traits>
  auto input(basic_istream<CharT, Traits>& in, range_type& r, iterator_type& i, size_t) -> bool
  {
    if (i != end(r) && (in >> *i))
    {
      ++i;
      return true;
    }
    
    return false;
  }
};

template <typename Range>
auto make_overwrite_behaviour(Range&) -> overwrite_behaviour<Range>
{
  return {};
}

/* 
 * Traits class for back insert behaviour.
 */
template <typename Range>
struct back_insert_behaviour :
  basic_insert_behaviour<Range, decltype(begin(declval<Range&>()))>
{
  typedef typename back_insert_behaviour::range_type    range_type;
  typedef typename back_insert_behaviour::iterator_type iterator_type;
  typedef typename back_insert_behaviour::value_type    value_type;
  
  back_insert_behaviour(size_t n, value_type v) :
    basic_insert_behaviour<range_type, iterator_type>{n, move(v)}
  {}
  
  // Starting iterator value for back inserting is end(r).
  auto prepare(range_type& r, iterator_type& i) -> bool
  {
    i = end(r);
    return true;
  }
  
  // As long as we haven't read more elements than desired, read an element
  // (overwriting the range value type member object), then push it back,
  // and reset the iterator to the end.
  template <typename CharT, typename Traits>
  auto input(basic_istream<CharT, Traits>& in, range_type& r, iterator_type& i, size_t n) -> bool
  {
    if ((n < this->n_) && (in >> this->v_))
    {
      r.push_back(move(this->v_));
      i = end(r);
      return true;
    }
    
    return false;
  }
};

template <typename Range>
auto make_back_insert_behaviour(Range&, size_t n, value_type_of<Range> v) ->
  back_insert_behaviour<Range>
{
  return {n, move(v)};
}

/* 
 * Traits class for front insert behaviour.
 */
template <typename Range>
struct front_insert_behaviour :
  basic_insert_behaviour<Range, decltype(begin(declval<Range&>()))>
{
  typedef typename front_insert_behaviour::range_type    range_type;
  typedef typename front_insert_behaviour::iterator_type iterator_type;
  typedef typename front_insert_behaviour::value_type    value_type;
  
  front_insert_behaviour(size_t n, value_type v) :
    basic_insert_behaviour<range_type, iterator_type>{n, move(v)}
  {}
  
  // As long as we haven't read more elements than desired, read an element
  // (overwriting the range value type member object), then push it to the
  // front, and reset the iterator to the beginning.
  template <typename CharT, typename Traits>
  auto input(basic_istream<CharT, Traits>& in, range_type& r, iterator_type& i, size_t n) -> bool
  {
    if ((n < this->n_) && (in >> this->v_))
    {
      r.push_front(move(this->v_));
      i = begin(r);
      return true;
    }
    
    return false;
  }
};

template <typename Range>
auto make_front_insert_behaviour(Range&, size_t n, value_type_of<Range> v) ->
  front_insert_behaviour<Range>
{
  return {n, move(v)};
}

/* 
 * Traits class for insert behaviour.
 */
template <typename Range, typename Iterator>
struct insert_behaviour :
  basic_insert_behaviour<Range, Iterator>
{
  typedef typename insert_behaviour::range_type    range_type;
  typedef typename insert_behaviour::iterator_type iterator_type;
  typedef typename insert_behaviour::value_type    value_type;
  
  insert_behaviour(size_t n, value_type v) :
    basic_insert_behaviour<range_type, iterator_type>{n, move(v)}
  {}
  
  // Starting iterator value for inserting is the iterator given.
  auto prepare(range_type& r, Iterator& i) -> bool
  {
    return true;
  }
  
  // As long as we haven't read more elements than desired, read an element
  // (overwriting the range value type member object), then insert it before
  // the desired location. The insert operation returns an iterator to the
  // newly inserted object, so increment that to get the next position, and
  // return it.
  template <typename CharT, typename Traits>
  auto input(basic_istream<CharT, Traits>& in, range_type& r, iterator_type& i, size_t n) -> bool
  {
    if ((n < this->n_) && (in >> this->v_))
    {
      i = ++r.insert(i, move(this->v_));
      return true;
    }
    
    return false;
  }
};

template <typename Range, typename Iterator>
auto make_insert_behaviour(Range&, Iterator, size_t n, value_type_of<Range> v) ->
  insert_behaviour<Range, Iterator>
{
  return {n, move(v)};
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 * Range input class.
 * 
 * This is the type that is returned by all range input functions. The Behaviour
 * trait controls the actual input behaviour according to the function.
 * 
 * This type keeps track of the number of elements read in the current read
 * operation, and the iterator to the next element in the range that can be
 * read into.
 *~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
template <typename Range, typename Iterator, typename Behaviour>
class RangeInputOperation
{
public:
  RangeInputOperation(Range& r, Iterator i, Behaviour b) :
    range_{r},
    op_(move(b)),
    count_{0},
    next_{i}
  {}
  
  // Returns the number of elements read in the last read operation.
  auto count() const noexcept -> size_t { return count_; }
  
  // Return an iterator to the next position in the range that would be read
  // into.
  auto next() const noexcept -> Iterator { return next_; }
  
  template <typename Range2, typename Iterator2, typename Behaviour2, typename CharT, typename Traits>
  friend auto operator>>(basic_istream<CharT, Traits>& in, RangeInputOperation<Range2, Iterator2, Behaviour2>&) ->
    basic_istream<CharT, Traits>&;
  
private:
  Range& range_;
  Behaviour op_;
  size_t count_;
  Iterator next_;
};

template <typename Range, typename Iterator, typename Behaviour>
auto make_range_input_op(Range& r, Iterator i, Behaviour b) ->
  RangeInputOperation<Range, Iterator, Behaviour>
{
  return { r, i, move(b) };
}

/* This is where the magic happens for range input.
 * 
 * First the count is reset to zero and the traits's prepare() function is
 * called to initialize the next() iterator.
 * 
 * If all that succeeds, the stream's initial formatting settings are stored
 * (so that they can be reused for each element read), and the reading loop
 * begins.
 * 
 * At each iteration of the reading loop, the stream's initial formatting is
 * restored, then the traits's input() function is called. The input() function
 * does the actual read and (if successful) stores the result into the range and
 * resets the next() iterator to the next read-into position. If any of this
 * fails or the input() function returns false, the reading loop ends. Otherwise
 * the count of successfully read elements is incremented.
 * 
 * Finally, the stream's width is set to zero, and the function returns.
 */
template <typename Range, typename Iterator, typename Behaviour, typename CharT, typename Traits>
auto operator>>(basic_istream<CharT, Traits>& in, RangeInputOperation<Range, Iterator, Behaviour>& p) ->
  basic_istream<CharT, Traits>&
{
  p.count_ = 0;
  
  if (p.op_.prepare(p.range_, p.next_))
  {
    auto const formatting = rangeio_detail::stream_formatting_saver<CharT, Traits>{in};
    
    while (true)
    {
      formatting.restore();
      
      if (!p.op_.input(in, p.range_, p.next_, p.count_))
        break;
      
      ++p.count_;
    }
  }
  
  in.width(0);
  
  return in;
}

// This is only necessary because calling the range input function directly in
// an input expression means the object it returns is a temporary, so a
// (non-const) lvalue reference can't be bound to it. All this function does is
// pass it to the function above.
template <typename Range, typename Iterator, typename Behaviour, typename CharT, typename Traits>
auto operator>>(basic_istream<CharT, Traits>& in, RangeInputOperation<Range, Iterator, Behaviour>&& p) ->
  basic_istream<CharT, Traits>&
{
  return in >> p;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 * Traits classes for output behaviours.
 * 
 * To cut down on code duplication, the bulk of range output is done in a single
 * class, with the differences in behaviours for the different operations
 * handled by traits classes.
 * 
 * There are only two functions required to differentiate between output
 * operations:
 *   - prepare: This is called at the start of an output operation. The primary
 *              purpose is to initialize the next() iterator to what it should
 *              be if no output is done (ie, if the range is empty). For all
 *              output operations, this is just begin(r).
 *   - output:  This does the actual output, checking any relevant conditions
 *              and returning true if the output operation can continue. It also
 *              updates the next() iterator.
 * 
 * There are two traits classes, for the types of output operations:
 * 
 * write_behaviour
 *   - write_all(Range&&&)
 * delimited_write_behaviour
 *   - write_all(Range&&&, Delimiter&&)
 * 
 *~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/

/* 
 * Base for output behaviour traits classes.
 */
template <typename Range, typename Iterator>
struct basic_output_behaviour
{
  // Starting iterator value for output is begin(r).
  auto prepare(Range& r, Iterator& i) -> bool
  {
    i = begin(r);
    return true;
  }
};

/* 
 * Traits class for non-delimited write behaviour.
 */
template <typename Range, typename Iterator = decltype(begin(declval<Range&>()))>
struct write_behaviour :
  basic_output_behaviour<Range, Iterator>
{
  // As long as we're not at the end of the range, write the next element,
  // and increment the iterator.
  template <typename CharT, typename Traits>
  auto output(basic_ostream<CharT, Traits>& out, Range const& r, Iterator& i, size_t) -> bool
  {
    if (i != end(r) && (out << *i))
    {
      ++i;
      return true;
    }
    
    return false;
  }
};

/* 
 * Traits class for delimited write behaviour.
 */
template <typename Range, typename Delimiter, typename Iterator = decltype(begin(declval<Range&>()))>
struct delimited_write_behaviour :
  basic_output_behaviour<Range, Iterator>
{
  explicit delimited_write_behaviour(Delimiter&& d) :
    delim_{forward<Delimiter>(d)}
  {}
  
  // As long as we're not at the end of the range, write the next element,
  // and increment the iterator. If we're *still* not at the end of the range,
  // write the delimiter.
  template <typename CharT, typename Traits>
  auto output(basic_ostream<CharT, Traits>& out, Range const& r, Iterator& i, size_t) -> bool
  {
    if (i != end(r) && (out << *i))
    {
      return (++i == end(r)) || (out << delim_);
    }
    
    return false;
  }
  
  Delimiter delim_;
};

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 * Range output class.
 * 
 * This is the type that is returned by all range output functions. The
 * Behaviour trait controls the actual output behaviour according to the
 * function.
 * 
 * This type keeps track of the number of elements written in the current write
 * operation, and the iterator to the next element in the range that can be
 * written to.
 *~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
template <typename Range, typename Iterator, typename Behaviour>
class RangeOutputOperation
{
public:
  RangeOutputOperation(Range&& r, Iterator i, Behaviour b) :
    range_{forward<Range>(r)},
    op_(move(b)),
    count_{0},
    next_{i}
  {}
  
  // Returns the number of elements read in the last read operation.
  auto count() const noexcept -> size_t { return count_; }
  
  // Return an iterator to the next position in the range that would be read
  // into.
  auto next() const noexcept -> Iterator { return next_; }
  
  template <typename Range2, typename Iterator2, typename Behaviour2, typename CharT, typename Traits>
  friend auto operator<<(basic_ostream<CharT, Traits>& out, RangeOutputOperation<Range2, Iterator2, Behaviour2>&) ->
    basic_ostream<CharT, Traits>&;
  
private:
  Range range_;
  Behaviour op_;
  size_t count_;
  Iterator next_;
};

template <typename Range, typename Iterator, typename Behaviour>
auto make_range_output_op(Range&& r, Iterator i, Behaviour b) ->
  RangeOutputOperation<Range&&, Iterator, Behaviour>
{
  return { forward<Range>(r), i, move(b) };
}

/* This is where the magic happens for range output.
 * 
 * First the count is reset to zero and the traits's prepare() function is
 * called to initialize the next() iterator.
 * 
 * If all that succeeds, the stream's initial formatting settings are stored
 * (so that they can be reused for each element), and the writing loop
 * begins.
 * 
 * At each iteration of the writing loop, the stream's initial formatting is
 * restored, then the traits's output() function is called. The output()
 * function does the actual write and (if successful) resets the next()
 * iterator to the next element to output. If any of this fails or the output()
 * function returns false, the writing loop ends. Otherwise the count of
 * successfully written elements is incremented.
 * 
 * If, after all that, the number of elements written is zero but the stream is
 * okay - which implies the range was empty, either literally or because some
 * constraint on the output function decided nothing could be written - then
 * the stream's fill character is written width times.
 * 
 * Finally, the stream's width is set to zero, and the function returns.
 */
template <typename Range, typename Iterator, typename Behaviour, typename CharT, typename Traits>
auto operator<<(basic_ostream<CharT, Traits>& out, RangeOutputOperation<Range, Iterator, Behaviour>& p) ->
  basic_ostream<CharT, Traits>&
{
  p.count_ = 0;
  
  if (p.op_.prepare(p.range_, p.next_))
  {
    auto const formatting = rangeio_detail::stream_formatting_saver<CharT, Traits>{out};
    
    while (true)
    {
      formatting.restore();
      
      if (!p.op_.output(out, p.range_, p.next_, p.count_))
        break;
      
      ++p.count_;
    }
    
    if (!p.count_ && static_cast<bool>(out))
    {
      for (auto n = out.width(); n && static_cast<bool>(out); --n)
        out.put(out.fill());
    }
  }
  
  out.width(0);
  
  return out;
}

// This is only necessary because calling the range output function directly in
// an output expression means the object it returns is a temporary, so a
// (non-const) lvalue reference can't be bound to it. All this function does is
// pass it to the function above.
template <typename Range, typename Iterator, typename Behaviour, typename CharT, typename Traits>
auto operator<<(basic_ostream<CharT, Traits>& out, RangeOutputOperation<Range, Iterator, Behaviour>&& p) ->
  basic_ostream<CharT, Traits>&
{
  return out << p;
}

} // namespace rangeio_detail

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 * The range I/O functions.
 * 
 * Everything above is behind-the-scenes details. Everything below is the actual
 * user interface for the range I/O library.
 * 
 * It consists of 15 functions - 13 input, 2 output - that all take a range,
 * possibly with other arguments, and either return a range input operation
 * object, or a range output operation object.
 *~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/

// Overwrite
template <typename Range>
auto overwrite(Range& r) ->
  rangeio_detail::RangeInputOperation<Range, decltype(begin(r)), rangeio_detail::overwrite_behaviour<Range>>
{
  using namespace rangeio_detail;
  
  return make_range_input_op(r, begin(r), make_overwrite_behaviour(r));
}

// Back insert
template <typename Range>
auto back_insert_n(Range& r, size_t n, rangeio_detail::value_type_of<Range> v) ->
  rangeio_detail::RangeInputOperation<Range, decltype(begin(r)), rangeio_detail::back_insert_behaviour<Range>>
{
  using namespace rangeio_detail;
  
  return make_range_input_op(r, end(r), make_back_insert_behaviour(r, n, move(v)));
}

template <typename Range>
auto back_insert_n(Range& r, size_t n) ->
  rangeio_detail::RangeInputOperation<Range, decltype(begin(r)), rangeio_detail::back_insert_behaviour<Range>>
{
  return back_insert_n(r, n, rangeio_detail::value_type_of<Range>{});
}

template <typename Range>
auto back_insert(Range& r, rangeio_detail::value_type_of<Range> v) ->
  rangeio_detail::RangeInputOperation<Range, decltype(begin(r)), rangeio_detail::back_insert_behaviour<Range>>
{
  return back_insert_n(r, numeric_limits<size_t>::max(), move(v));
}

template <typename Range>
auto back_insert(Range& r) ->
  rangeio_detail::RangeInputOperation<Range, decltype(begin(r)), rangeio_detail::back_insert_behaviour<Range>>
{
  return back_insert(r, rangeio_detail::value_type_of<Range>{});
}

// Front insert
template <typename Range>
auto front_insert_n(Range& r, size_t n, rangeio_detail::value_type_of<Range> v) ->
  rangeio_detail::RangeInputOperation<Range, decltype(begin(r)), rangeio_detail::front_insert_behaviour<Range>>
{
  using namespace rangeio_detail;
  
  return make_range_input_op(r, begin(r), make_front_insert_behaviour(r, n, move(v)));
}

template <typename Range>
auto front_insert_n(Range& r, size_t n) ->
  rangeio_detail::RangeInputOperation<Range, decltype(begin(r)), rangeio_detail::front_insert_behaviour<Range>>
{
  return front_insert_n(r, n, rangeio_detail::value_type_of<Range>{});
}

template <typename Range>
auto front_insert(Range& r, rangeio_detail::value_type_of<Range> v) ->
  rangeio_detail::RangeInputOperation<Range, decltype(begin(r)), rangeio_detail::front_insert_behaviour<Range>>
{
  return front_insert_n(r, numeric_limits<size_t>::max(), move(v));
}

template <typename Range>
auto front_insert(Range& r) ->
  rangeio_detail::RangeInputOperation<Range, decltype(begin(r)), rangeio_detail::front_insert_behaviour<Range>>
{
  return front_insert(r, rangeio_detail::value_type_of<Range>{});
}

// Insert
template <typename Range, typename Iterator>
auto insert_n(Range& r, Iterator i, size_t n, rangeio_detail::value_type_of<Range> v) ->
  rangeio_detail::RangeInputOperation<Range, Iterator, rangeio_detail::insert_behaviour<Range, Iterator>>
{
  using namespace rangeio_detail;
  
  return make_range_input_op(r, i, make_insert_behaviour(r, i, n, move(v)));
}

template <typename Range, typename Iterator>
auto insert_n(Range& r, Iterator i, size_t n) ->
  rangeio_detail::RangeInputOperation<Range, Iterator, rangeio_detail::insert_behaviour<Range, Iterator>>
{
  return insert_n(r, i, n, rangeio_detail::value_type_of<Range>{});
}

template <typename Range, typename Iterator>
auto insert(Range& r, Iterator i, rangeio_detail::value_type_of<Range> v) ->
  rangeio_detail::RangeInputOperation<Range, Iterator, rangeio_detail::insert_behaviour<Range, Iterator>>
{
  return insert_n(r, i, numeric_limits<size_t>::max(), move(v));
}

template <typename Range, typename Iterator>
auto insert(Range& r, Iterator i) ->
  rangeio_detail::RangeInputOperation<Range, Iterator, rangeio_detail::insert_behaviour<Range, Iterator>>
{
  return insert(r, i, rangeio_detail::value_type_of<Range>{});
}

// Write all
template <typename Range>
auto write_all(Range&& r) ->
  rangeio_detail::RangeOutputOperation<Range&&, decltype(begin(r)), rangeio_detail::write_behaviour<Range>>
{
  using namespace rangeio_detail;
  
  // NOTE: begin(r) is captured here, because r may be moved momentarily. This
  //       is not really a solution, because after moving, i may be invalidated.
  //       That means that the next() member of RangeOutputOperation could be
  //       junk until the first write. How to deal with this? There seems to be
  //       no ideal solution. Perhaps just declare that next() is undefined
  //       until the first write? Or call prepare() in the constructor?
  auto i = begin(r);
  return make_range_output_op(forward<Range>(r), i, write_behaviour<Range>{});
}

template <typename Range, typename Delimiter>
auto write_all(Range&& r, Delimiter&& d) ->
  rangeio_detail::RangeOutputOperation<Range&&, decltype(begin(r)), rangeio_detail::delimited_write_behaviour<Range, Delimiter&&>>
{
  using namespace rangeio_detail;
  
  // NOTE: See above.
  auto i = begin(r);
  return make_range_output_op(forward<Range>(r), i, delimited_write_behaviour<Range, Delimiter&&>{forward<Delimiter>(d)});
}

} // namespace std

#endif // STD_RANGEIO_
